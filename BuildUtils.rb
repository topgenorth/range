require 'erb'

class NUnitRunner
        include FileTest

        def initialize(paths)
                @sourceDir = paths.fetch(:source, 'source')
                @resultsDir = paths.fetch(:results, 'results')
                @compilePlatform = paths.fetch(:platform, '')
                @compileTarget = paths.fetch(:compilemode, 'debug')
                @nunitExe = File.join('tools', 'NUnit','bin', "nunit-console#{(@compilePlatform.empty? ? '' : "-#{@compilePlatform}")}.exe").gsub('/','\\') #+ ' -nothread'
        end
        
        def executeTests(assemblies)
				print @nunitExe
				print "\n"

#                Dir.mkdir @resultsDir unless exists?(@resultsDir)
                
                assemblies.each do |assem|
                        file = File.expand_path("#{@sourceDir}/#{assem}/bin/#{@compileTarget}/#{assem}.dll")
						print "#{file}\n"
#                        sh "#{@nunitExe} #{file}"
                end
        end
end

class XBuildRunner
        def self.compile(attributes)
			compileTarget = attributes.fetch(:compilemode, 'debug')
			solutionFile = attributes[:solutionfile]
#			version = attributes.fetch(:clrversion, 'v3.5')
#			frameworkDir = File.join(ENV['windir'].dup, 'Microsoft.NET', 'Framework', version)
#			msbuildFile = File.join(frameworkDir, 'msbuild.exe')
			xbuildFile = '/usr/bin/xbuild'

			sh "#{xbuildFile} #{solutionFile} /nologo  /v:m /property:BuildInParallel=false /property:Configuration=#{compileTarget}"
        end
end

class MSBuildRunner
        def self.compile(attributes)
			version = attributes.fetch(:clrversion, 'v3.5')
			compileTarget = attributes.fetch(:compilemode, 'debug')
			solutionFile = attributes[:solutionfile]

			frameworkDir = File.join(ENV['windir'].dup, 'Microsoft.NET', 'Framework', version)
			msbuildFile = File.join(frameworkDir, 'msbuild.exe')

			sh "#{msbuildFile} #{solutionFile} /nologo /maxcpucount /v:m /property:BuildInParallel=false /property:Configuration=#{compileTarget} /t:Rebuild"
        end
end

class AsmInfoBuilder
        attr_reader :buildnumber

        def initialize(baseVersion, properties)
                @properties = properties;
                
                @buildnumber = baseVersion + (ENV["CCNetLabel"].nil? ? '0' : ENV["CCNetLabel"].to_s)
                @properties['Version'] = @properties['InformationalVersion'] = buildnumber;
        end


        
        def write(file)
                template = %q{// This file was generated by a tool.
using System;
using System.Reflection;
using System.Runtime.InteropServices;

<% @properties.each {|k, v| %>
[assembly: Assembly<%=k%>Attribute("<%=v%>")]
<% } %>
                }.gsub(/^    /, '')
                  
          erb = ERB.new(template, 0, "%<>")
          
          File.open(file, 'w') do |file|
                  file.puts erb.result(binding) 
          end
        end
end

